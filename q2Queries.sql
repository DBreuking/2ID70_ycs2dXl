SELECT Courses.CourseName, CourseRegistrations.gradeFROM StudentRegistrationsToDegreesINNER JOIN CourseRegistrations ON CourseRegistrations.StudentRegistrationId = StudentRegistrationsToDegrees.StudentRegistrationIdINNER JOIN CourseOffersON CourseOffers.courseofferid = CourseRegistrations.courseofferidINNER JOIN CoursesON Courses.courseid = CourseOffers.courseidWHERE StudentRegistrationsToDegrees.StudentId = %1% AND CourseRegistrations.grade > 5 AND StudentRegistrationsToDegrees.degreeid = %2%;
SELECT studentidFROM (	SELECT passedStudentDegree.studentid, passedStudentDegree.degreeid, SUM(CASE WHEN courseregistrations.grade < 5 THEN 1 ELSE 0 END) AS failCount, AVG(grade) AS GPA	FROM passedStudentDegree	INNER JOIN StudentRegistrationsToDegrees	ON StudentRegistrationsToDegrees.studentid = passedStudentDegree.studentid AND StudentRegistrationsToDegrees.degreeid = passedStudentDegree.degreeid	INNER JOIN CourseRegistrations	ON CourseRegistrations.StudentRegistrationId = StudentRegistrationsToDegrees.StudentRegistrationId	WHERE grade IS NOT NULL	GROUP BY passedStudentDegree.degreeid, passedStudentDegree.studentid) AS studentExcellenceWHERE failCount < 1 AND GPA > %1%ORDER BY studentid;
WITH GenderIDPassed AS ( 		SELECT Students.Gender, COUNT(Students.Gender) AS genderCount, passedStudentDegree.DegreeId		FROM passedStudentDegree		INNER JOIN students		ON passedStudentDegree.studentid = students.studentid		GROUP BY students.studentid, passedStudentDegree.DegreeId	)SELECT finished.degreeid, finished.percentageFROM (	Select GenderIDPassed.degreeid, (GenderIDPassed.genderCount::decimal/FullPassed.fullCount)*100 AS percentage	FROM GenderIDPassed	INNER JOIN (		SELECT SUM(GenderIDPassed.genderCount) AS fullCount, GenderIDPassed.degreeid		FROM GenderIDPassed		GROUP BY GenderIDPassed.degreeid	) AS FullPassed	ON FullPassed.degreeid = GenderIDPassed.degreeid	WHERE GenderIDPassed.Gender = 'F') AS finished;
SELECT FLOAT (SELECT SUM(Gender) FROM Students WHERE Gender='female')/(SELECT COUNT(Gender) FROM Students) AS percentageFROM Students, StudentRegistrationsToDegrees, DegreesWHERE Students.StudentId=StudentRegistrationsToDegrees.StudentId AND      StudentRegistrationsToDegrees.DegreeId IN (		SELECT DegreeId		FROM Degrees		WHERE Degrees.Dept=%1%	);
SELECT courses.courseid, (SUM(CASE WHEN courseregistrations.grade > %1% THEN 1 ELSE 0 END)/COUNT(courses.courseid)::decimal)*100 AS percentagePassingFROM coursesINNER JOIN courseoffersON courseoffers.courseid = courses.courseidINNER JOIN courseregistrationsON courseregistrations.courseofferid = courseoffers.courseofferid AND courseregistrations.grade IS NOT NULLGROUP BY courses.courseid;
SELECT	StudentId, COUNT(StudentRegistrationId)FROM	StudentsINNER JOIN StudentRegistrationsToDegrees	on Students.StudentId=StudentRegistrationsToDegrees.StudentIdWHERE	StudentRegistrationsToDegrees.StudentRegistrationId IN (		SELECT	CourseOfferId, StudentRegistrationId, MAX(CourseRegistrations.Grade)		FROM	CourseRegistrations 		INNER JOIN CourseOffers			on CourseRegistrations.CourseOfferId=CourseOffers.CourseOfferId		WHERE	CourseOffers.Year=2018 AND			CourseOffers.Quartile=1 AND			CourseRegistrations.Grade IN (				SELECT MAX(CourseRegistrations.Grade)				FROM CourseRegistrations			)		GROUP BY CourseOfferId	)HAVING	COUNT(StudentRegistrationId)>=%1%;
SELECT active.degreeid, students.birthyearstudent, students.gender, AVG(cr.grade) AS avgGradeFROM (	SELECT sr.studentid, sr.degreeId, sr.studentregistrationid	FROM studentregistrationstodegrees AS sr	WHERE NOT EXISTS (SELECT studentid FROM passedStudentDegree WHERE passedStudentDegree.studentid = sr.studentid AND passedStudentDegree.DegreeId = sr.DegreeId)) AS activeINNER JOIN studentsON students.studentid = active.studentidINNER JOIN courseregistrations AS crON cr.studentregistrationid = active.studentregistrationid AND cr.grade IS NOT NULLGROUP BY CUBE (active.degreeid, students.birthyearstudent, students.gender);
SELECT Courses.courseName, CourseOffers.year, CourseOffers.quartile FROM (	SELECT actualAssistants, Count(CourseRegistrations.StudentRegistrationId)/50 AS minAssistants, realAssistants.CourseOfferID	FROM(		SELECT COUNT(StudentAssistants.StudentRegistrationId) AS actualAssistants, StudentAssistants.CourseOfferID		FROM StudentAssistants		GROUP BY StudentAssistants.CourseOfferID	) AS realAssistants	INNER JOIN CourseRegistrations	ON CourseRegistrations.CourseOfferID = realAssistants.courseOfferID	GROUP BY realAssistants.courseOfferID, actualAssistants	ORDER BY realAssistants.CourseOfferID) AS assistantStatsINNER JOIN CourseOffersON CourseOffers.CourseOfferID = assistantStats.CourseOfferIDINNER JOIN CoursesON Courses.courseId = CourseOffers.courseIdWHERE assistantStats.minAssistants > assistantStats.actualAssistants;

